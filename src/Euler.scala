import scala.collection.immutable.Range
import scala.collection.mutable.ListBuffer
import scala.util.control.Breaks._

object Euler extends App{
  //  def main(args: Array[String])
  //  {

  println("Executing Euler Code")
  val output = natural_number_multiples(1000)
  println(output)

  val output2 = fibSolution(4000000)
  println(output2)
  //  }


  def natural_number_multiples( multipleValue : Int) : Int = {
    println("Running natural_number_multiples")
    //If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
    //Find the sum of all the multiples of 3 or 5 below 1000.

    var x =0;
    var multiples = new ListBuffer[Int]()

    for(x <- 3 to multipleValue-1)
    {
      if(x%3 == 0)
      {
        multiples += x
      }
      else if(x%5 == 0)
      {
        multiples += x
      }
    }
    var summation = 0;
    summation = multiples.sum
    return summation
  }

  def fibSolution(fibTerm : Int) : Int =
  {
    println("Running fibSolution")
    //Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    //
    //1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    //
    //By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    var fibList = ListBuffer(1,2)
    var x = 3

    breakable{
      while(fibList.last < fibTerm){
        var addVal1 = fibList(fibList.size-1)
        var addVal2 = fibList(fibList.size-2)
        var addVal = addVal1 + addVal2

        if(addVal < fibTerm) {

          fibList += addVal
        }
        else{
          break()
        }
      }

    }

    val evenFibs = fibList.filter(_ % 2 ==0)
    var fibSummation = evenFibs.sum

    return fibSummation

  }


}